# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME         - Docker image name used to run Airflow.
#                              Default: apache/airflow:master-python3.8
# AIRFLOW_UID                - User ID in Airflow containers
#                              Default: 50000
# AIRFLOW_GID                - Group ID in Airflow containers
#                              Default: 50000
# _AIRFLOW_WWW_USER_USERNAME - Username for the administrator account.
#                              Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD - Password for the administrator account.
#                              Default: airflow
#
# Feel free to modify this file to suit your needs.
---
version: '3'
x-airflow-common:
  &airflow-common
  build:
    context: ./
    dockerfile: ./docker/airflow/Dockerfile
  image: airflow-server:0.1
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__WEBSERVER__DAG_DEFAULT_VIEW: 'graph'
    MLFLOW_TRACKING_URI: '${MLFLOW_TRACKING_URI}'
    FEEDBACK_DATA_DIR : '/workspace/data/feedback'
    RAW_DATA_DIR : '/workspace/data/raw'
    PROCESSED_DATA_DIR : '/workspace/data/processed'
  volumes:
    - ./src/pipelines/dags:/opt/airflow/dags
    - ./src/pipelines/logs:/opt/airflow/logs
    - ./src/pipelines/plugins:/opt/airflow/plugins
    - ./data:/workspace/data
    - ./storage/artifacts:/opt/airflow/storage/artifacts
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}"
      - "POSTGRES_DB=${POSTGRES_DB}"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver --port=${AIRFLOW_PORT}
    ports:
      - "${AIRFLOW_PORT}:${AIRFLOW_PORT}"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${AIRFLOW_PORT}/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  flower:
    <<: *airflow-common
    command: celery flower --port=${FLOWER_PORT}
    ports:
      - "${FLOWER_PORT}:${FLOWER_PORT}"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${FLOWER_PORT}/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  mlflow:
    build:
      context: ./
      dockerfile: ./docker/mlflow/Dockerfile
    image: mlflow-tracking-server:0.1
    environment:
      - "MLFLOW_SERVER_PORT=${MLFLOW_SERVER_PORT}"
      - "MLFLOW_ARTIFACT_ROOT=${MLFLOW_ARTIFACT_ROOT}"
      - "MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI}"
      - "MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}"
    ports:
      - "${MLFLOW_SERVER_PORT}:${MLFLOW_SERVER_PORT}"
    working_dir: /workspace
    volumes:
      - $PWD/:/workspace/
    command: sh -c "cd /workspace/ && ./docker/mlflow/run_mlflow_server.sh"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:${MLFLOW_SERVER_PORT}/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  webapp:
    depends_on:
      - mlflow
    build:
      context: ./
      dockerfile: ./docker/webapp/Dockerfile
    image: flask-webapp:0.1
    environment:
      MLFLOW_SERVER_PORT: "${MLFLOW_SERVER_PORT}"
      MLFLOW_TRACKING_URI: "${MLFLOW_TRACKING_URI}"
      FLASK_PORT: "${FLASK_PORT}"
    ports:
      - "${FLASK_PORT}:${FLASK_PORT}"
    working_dir: /workspace
    volumes:
      - $PWD/src/webapp/:/workspace/
      - ./data:/workspace/data
      - ./storage:/workspace/storage
    command: sh -c "cd /workspace/ && ./run_debug.sh"
    restart: always

volumes:
  postgres-db-volume: